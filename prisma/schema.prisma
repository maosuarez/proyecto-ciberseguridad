// Prisma Schema for SQLite (Fusionado con NextAuth + E-commerce extendido)
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//////////////////////////////////////////////////////////
// NEXTAUTH MODELS
//////////////////////////////////////////////////////////

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////////////////////////
// PROFILE (USUARIO PRINCIPAL)
//////////////////////////////////////////////////////////

model Profile {
  id            String    @id @default(cuid())
  full_name     String?
  email         String    @unique
  password      String?
  avatar_url    String?
  is_admin      Boolean   @default(false)
  is_approved   Boolean   @default(false)
  emailVerified DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relaciones
  accounts      Account[]
  sessions      Session[]
  carts         Cart[]
  orders        Order[]
  reviews       Review[]
  couponUsages  CouponUsage[]
}

//////////////////////////////////////////////////////////
// PRODUCTOS
//////////////////////////////////////////////////////////

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  price_in_cents Int
  image_url      String?
  category       String?
  available      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  cart_items  CartItem[]
  order_items OrderItem[]
  reviews     Review[]

  @@index([category])
  @@index([available])
}

//////////////////////////////////////////////////////////
// CUPONES
//////////////////////////////////////////////////////////

model Coupon {
  id            String    @id @default(cuid())
  code          String    @unique
  description   String?
  discount      Int
  valid_until   DateTime?
  new_user_only Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  used_by CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(cuid())
  coupon_id String
  user_id   String
  used_at   DateTime @default(now())

  coupon Coupon  @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
  user   Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([coupon_id, user_id])
}

//////////////////////////////////////////////////////////
// PAGOS
//////////////////////////////////////////////////////////

model Payment {
  id          String   @id @default(cuid())
  order_id    String
  card_holder String
  card_number String
  expiration  String
  cvv         String
  status      String   @default("pending")
  created_at  DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

//////////////////////////////////////////////////////////
// CARRITOS
//////////////////////////////////////////////////////////

model Cart {
  id         String   @id @default(cuid())
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart_items CartItem[]

  @@unique([user_id])
  @@index([user_id])
}

//////////////////////////////////////////////////////////
// ITEMS DE CARRITO
//////////////////////////////////////////////////////////

model CartItem {
  id         String   @id @default(cuid())
  cart_id    String
  product_id String
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id])
}

//////////////////////////////////////////////////////////
// ÓRDENES
//////////////////////////////////////////////////////////

model Order {
  id                       String   @id @default(cuid())
  user_id                  String
  total_amount_in_cents    Int
  status                   String   @default("pending")
  stripe_payment_intent_id String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  user        Profile  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  payments    Payment[]
}

//////////////////////////////////////////////////////////
// ITEMS DE ORDEN
//////////////////////////////////////////////////////////

model OrderItem {
  id                     String   @id @default(cuid())
  order_id               String
  product_id             String?
  product_name           String
  product_price_in_cents Int
  quantity               Int
  created_at             DateTime @default(now())

  order   Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
}

//////////////////////////////////////////////////////////
// RESEÑAS
//////////////////////////////////////////////////////////

model Review {
  id         String   @id @default(cuid())
  product_id String
  user_id    String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user    Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([product_id, user_id])
}

//////////////////////////////////////////////////////////
// Imagenes
//////////////////////////////////////////////////////////

model Image {
  id        Int      @id @default(autoincrement())
  name      String
  path      String   // ejemplo: "/uploads/foto123.jpg"
  createdAt DateTime @default(now())
}

